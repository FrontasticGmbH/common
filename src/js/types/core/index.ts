// This file is autogenerated â€“ run `ant apidocs` to update it

export interface ApiDataObject {
     /**
      * Raw api data from client to backend.
      *
      * This property should not be filled by Frontastic itself, but if can be done only to allow backward compatibility.
      * When present on write access to an API implementation MAY store information in appropriate way. It's up to the
      * client to provide the right format.
      *
      * In a project it can be used to carry custom input from frontend to backend in the following use case:
      *
      * - Transfer raw api data to the backend: Use an API Lifecycle Decorator to map data from $projectSpecificData into
      * $rawApiInput to make the API implementation carry it to the configured backend service, if the API supports it.
      *
      * This property should contain an object (\stdClass or data object) or an array (list).
      */
     rawApiInput?: any | any;
     /**
      * Access backend data from and to frontend.
      *
      * This should only be used for customization on a project basis. Depending on the option of the access we can find
      * the following use cases:
      *
      * - On write access: the data stored in $projectSpecificData can be used on an API Lifecycle Decorator to map
      * data from $projectSpecificData into $rawApiInput.
      *
      * - On read access: the client can use a API Lifecycle Decorator to map to map data from $dangerousInner*
      *  into $projectSpecificData (since $dangerousInner* will be stripped before sending).
      */
     projectSpecificData?: any;
}

export interface ErrorResult {
     ok: boolean;
     message?: string;
     endpoint?: string;
     file?: string;
     line?: number;
     stack?: string[];
     code?: string;
     parameters?: any;
}
