// This file is autogenerated – run `ant apidocs` to update it

import {
    ApiDataObject as CoreApiDataObject,
} from '../../core/'

export interface FacetDefinition extends CoreApiDataObject {
     attributeType: string;
     attributeId: string;
}

/**
 * Simple utility class to handle locales:
 *
 * language[_territory[.codeset]][@modifier]
 *
 * - de_DE
 * - en_GB@euro
 */
export interface Locale extends CoreApiDataObject {
     /**
      * A two or three letter identifier for the language, e.g. fr, de, en …
      */
     language: string;
     /**
      * A two letter identifier for the territory, e.g. CH, DE, FR …
      */
     territory: string;
     /**
      * A human readable country identifier.
      */
     country: string;
     /**
      * A three letter identifier for used currency.
      */
     currency: string;
     original: string;
}

/**
 * Class PaginatedQuery can be used for both, offset and cursor-based pagination.
 *
 * In general terms, REST APIs use offset pagination whereas GraphQL APIs use cursor-based pagination.
 *
 * Regardless the pagination implemented by your backend of choice, we highly recommend you to use in both cases
 * the property $cursor to store the position where the pagination should start.
 *
 * NOTE: the property $offset will be deprecated in a further commit.
 */
export interface PaginatedQuery extends Query {
     /**
      * Optional limit, the default value is <b>24</b>, because it is divisible
      * by 2, 3, 4 & 6 – which are common numbers or products per row in
      * frontends.
      */
     limit?: number;
     /**
      * Optional start offset, default is <b>0</b>.
      */
     offset?: number;
     /**
      * Optional item reference where the pagination should start.
      */
     cursor?: string;
}

export interface Query extends CoreApiDataObject {
     locale?: string;
     /**
      * Access original object from backend
      *
      * This should only be used if you need very specific features
      * right NOW. Please notify Frontastic about your need so that
      * we can integrate those with the common API. Any usage off
      * this property might make your code unstable against future
      * changes.
      */
     loadDangerousInnerData?: boolean;
}

/**
 * Class Result can be used for both, offset and cursor-based pagination.
 *
 * In general terms, REST APIs use offset pagination whereas GraphQL APIs use cursor-based pagination.
 *
 * Regardless the pagination implemented by your backend of choice, we highly recommend you to use in both cases
 * the property $nextCursor to store the position where the pagination should continue.
 *
 * Additionally, and only for GraphQL APIs, you can use $previousCursor to store the position
 * of the first element to allow backward pagination.
 *
 * NOTE: the property $offset will be deprecated in a further commit.
 */
export interface Result extends CoreApiDataObject {
     offset?: number;
     total?: number;
     previousCursor?: string;
     nextCursor?: string;
     count: number;
     items: any;
     facets?: any /* \Frontastic\Common\ProductApiBundle\Domain\ProductApi\Result\Facet */[];
     /**
      * The query used to generate this result (cloned)
      */
     query: Query;
}
