<?php

namespace Frontastic\Common\SpecificationBundle\Domain\Schema;

class GroupFieldConfiguration extends FieldConfiguration
{
    private int $min = 1;

    private ?int $max = null;

    /**
     * @var FieldConfiguration[]
     */
    private array $fields = [];

    public static function doCreateFromSchema(string $type, array $fieldSchema): FieldConfiguration
    {
        /** @var self $schema */
        $schema = parent::doCreateFromSchema($type, $fieldSchema); // TODO: Change the autogenerated stub

        $schema->min = self::getSchemaValue($fieldSchema, 'min', 1);
        $schema->max = self::getSchemaValue($fieldSchema, 'max', null);

        foreach (self::getSchemaValue($fieldSchema, 'fields', []) as $nestedFieldSchema) {
            $schema->fields[] = FieldConfiguration::fromSchema($nestedFieldSchema);
        }
        return $schema;
    }

    public function processValueIfRequired($value)
    {
        if (!is_array($value)) {
            $value = [];
        }

        while (count($value) < $this->min) {
            $value[] = [];
        }

        foreach ($value as $index => $nestedValue) {
            $value[$index] = $this->completeNestedValue($nestedValue);
        }

        if ($this->max !== null && count($value) > $this->max) {
            $value = array_slice($value, 0, $this->max);
        }
        return $value;
    }

    private function completeNestedValue($nestedValue)
    {
        if (!is_array($nestedValue)) {
            $nestedValue = [];
        }

        foreach ($this->fields as $nestedField) {
            if (!isset($nestedValue[$nestedField->getField()])) {
                $nestedValue[$nestedField->getField()] = $nestedField->getDefault();
            }
        }
        return $nestedValue;
    }
}
